version: '3.8'
services:
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile.dev
    ports:
      - 8000:8000
    volumes:
      - ./apps/api:/app/apps/api
    environment:
      - DATABASE_URL:postgresql://postgres:postgres@localhost:5432/platform?schema=public
    depends_on:
      - db
    env_file:
      - apps/api/.env
  db:
    image: postgres
    volumes:
      - ./tmp/pg:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=platform
  stdb:
    image: 'postgres:latest'
    environment:
      POSTGRES_USER: supertokens_user
      POSTGRES_PASSWORD: somePassword
      POSTGRES_DB: supertokens
    ports:
      - 5433:5432
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD', 'pg_isready -U supertokens_user' ]
      interval: 5s
      timeout: 5s
      retries: 5

  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql
    depends_on:
      - stdb
    ports:
      - 3567:3567
    environment:
      POSTGRESQL_CONNECTION_URI: "postgresql://supertokens_user:somePassword@stdb:5432/supertokens"
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app_network:
    driver: bridge
